/* Modules */

const path = require('path');
const parser = require('tap-out');
const through = require('through2');
const duplexer = require('duplexer');
const fse = require('fs-extra');
const parsedArgs = require('minimist')(process.argv.slice(2));
const serialize = require('./lib/serialize.js');

/* Parser */

module.exports = () => {
	const tap = parser();
	let out = through();
	let testSuites = [];
	let finished = false;
	let testCase = {};
	let dup = duplexer(tap, out);

	/* Helpers */

	/**
	 * Writes the tap.xml file
	 * @param  {String} xml     the xml string generated by the tap-parser events
	 * @param  {Boolean} passing passing boolean to let us know that the tests are passing
	 * @return {Null} No Return required
	 */
	const writeOutput = (xml, passing) => {
		const output = parsedArgs.output || process.cwd();

		fse.mkdirp(output, (err) => {
			if (err) {
				console.error('There was an error when tap-junit tried to create the output directory');
				throw err;
			}
			fse.writeFile(path.join(output, 'tap.xml'), xml, (xmlErr) => {
				if (xmlErr) {
					console.error('There was a write error when tap-junit tried to write your output file');
					throw xmlErr;
				}
				if (!passing) {
					console.error(new Error('Looks like the test suites failed, check your tap.xml for more info'));
					process.exit(1);
				}
				console.log('Finished! tap.xml created');
			});
		});
	};

	/**
	 * Creates a new test object and pushes it into our suites
	 * @param  {String} testInfo Test name
	 * @return {Object}            Returns the newly created test object
	 */
	const newTest = ({name, number}) => {
		const recordedTest = {
			id: number,
			extraCount: 0,
			extra: [],
			assertCount: 0,
			asserts: [],
			comments: 0,
			skipCount: 0,
			skipped: false,
			errorCount: 0,
			errors: [],
			testName: name
		};

		testSuites.push(recordedTest);

		return recordedTest;
	};

	const isSkipped = ({raw}) => {
		return (/#\s?([A-Z])\w+/).test(raw);
	};

	/* Parser Event listening */

	// This is the ENITRE test event not just the inner asserts
	tap.on('test', res => {
		if (finished) {
			return;
		}

		testCase = newTest(res);
		testCase.skipped = isSkipped(res);
	});

	tap.on('comment', () => {
		testCase.comments++;
	});

	// Event for each assert inside the current Test
	tap.on('assert', res => {
		if (!testCase) {
			testCase = newTest('Default');
		}
		testCase.assertCount++;
		res.skip = isSkipped(res);
		testCase.asserts.push(res);
	});

	tap.on('extra', extra => {
		if (testCase && extra) {
			testCase.extraCount++;
			testCase.extra.push(extra);
		}
	});

	tap.on('plan', () => {
		finished = true;
	});

	tap.on('output', output => {
		const xmlString = serialize(testSuites);

		out.push(xmlString);
		writeOutput(xmlString, (output.fail.length === 0));
	});

	return dup;
};
